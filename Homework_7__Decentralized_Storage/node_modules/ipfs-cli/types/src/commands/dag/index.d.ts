export const commands: ({
    command: string;
    describe: string;
    builder: {
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, rootcid, timeout }: {
        ctx: import("../../types.js").Context;
        rootcid: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        'local-resolve': {
            type: string;
            default: boolean;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        'data-enc': {
            describe: string;
            type: string;
            choices: string[];
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, cidpath, cidBase, dataEnc, localResolve, timeout }: {
        ctx: import("../../types.js").Context;
        cidpath: string;
        cidBase: string;
        dataEnc: "base64" | "base58btc" | "base16";
        localResolve: boolean;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        'pin-roots': {
            type: string;
            default: boolean;
            describe: string;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print, getStdin }, path, pinRoots, timeout, cidBase }: {
        ctx: import("../../types.js").Context;
        path: string[];
        pinRoots: boolean;
        timeout: number;
        cidBase: string;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        data: {
            type: string;
        };
        format: {
            type: string;
            alias: string;
            default: string;
            describe: string;
            choices: string[];
        };
        'input-encoding': {
            type: string;
            alias: string;
            default: string;
            describe: string;
            choices: string[];
        };
        pin: {
            type: string;
            default: boolean;
            describe: string;
        };
        'hash-alg': {
            type: string;
            alias: string;
            default: string;
            describe: string;
        };
        'cid-version': {
            type: string;
            describe: string;
            default: number;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        preload: {
            type: string;
            default: boolean;
            describe: string;
        };
        'only-hash': {
            type: string;
            default: boolean;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print, getStdin }, data, format, inputEncoding, pin, hashAlg, cidVersion, cidBase, preload, onlyHash, timeout }: {
        ctx: import("../../types.js").Context;
        data: string;
        format: "dag-pb" | "cbor" | "protobuf" | "raw" | "dag-cbor";
        inputEncoding: "json" | "cbor" | "protobuf" | "raw";
        cidVersion: import("multiformats/cid").CIDVersion;
        pin: boolean;
        hashAlg: string;
        cidBase: string;
        preload: boolean;
        onlyHash: boolean;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        ref: {
            type: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, ref, timeout }: {
        ctx: import("../../types.js").Context;
        ref: string;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map